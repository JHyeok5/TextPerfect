# GitHub Pages 배포를 위한 설정 안내

## 1. 권한 설정
GitHub Actions가 저장소에 쓰기 권한이 필요하여 다음과 같이 설정해야 합니다:

1. GitHub 저장소 페이지로 이동
2. "Settings" 탭을 클릭
3. 왼쪽 사이드바에서 "Actions" > "General" 메뉴 선택
4. "Workflow permissions" 섹션에서 다음 설정을 변경:
   - "Read and write permissions" 옵션 선택
   - "Allow GitHub Actions to create and approve pull requests" 체크박스 활성화 (선택 사항)
5. "Save" 버튼 클릭

## 2. Personal Access Token 사용 (대안)
GitHub Token 대신 Personal Access Token을 사용할 수도 있습니다:

1. GitHub 계정 설정에서 Personal Access Token 생성 (repo 권한 필요)
   - GitHub 프로필 > Settings > Developer settings > Personal access tokens > Generate new token
   - 'repo' 권한 체크
   - 토큰 생성 후 복사 (한 번만 표시되므로 안전하게 저장)
   
2. 생성한 토큰을 저장소의 Secrets에 추가
   - 저장소 > Settings > Secrets and variables > Actions > New repository secret
   - 이름: GH_PAGES_TOKEN
   - 값: 복사한 토큰 붙여넣기
   
3. 워크플로우 파일 수정하여 이 토큰 사용:
   ```yaml
   - name: Deploy
     uses: JamesIves/github-pages-deploy-action@v4
     with:
       branch: gh-pages
       folder: build
       token: ${{ secrets.GH_PAGES_TOKEN }}
   ```

## 3. GitHub Pages 활성화
배포 후 GitHub Pages를 활성화하는 방법:

1. 저장소 > Settings > Pages
2. Source에서 'Deploy from a branch' 선택
3. Branch 드롭다운에서 'gh-pages' 선택, /(root) 선택
4. Save 클릭

## 4. SPA 라우팅
GitHub Pages는 SPA 라우팅을 기본적으로 지원하지 않아 다음 설정을 추가했습니다:
- 404.html 페이지: SPA 라우팅을 위한 리디렉션 스크립트 포함
- index.html: SPA 리디렉션 처리 스크립트 추가
- .nojekyll 파일: Jekyll 처리 방지

## 5. 문제 해결
배포 실패 시 확인할 사항:
- Workflow 권한 설정 확인
- Personal Access Token 권한 및 유효기간 확인
- GitHub Pages 분기 설정 확인

배포가 성공하면 다음 URL에서 사이트에 접근할 수 있습니다:
https://textperfect.space

GitHub Pages 배포를 위한 설계안
1. GitHub Pages 특성 고려사항
1.1 제약 사항

정적 호스팅만 가능 (서버 사이드 코드 실행 불가)
API 키 보안 문제 (클라이언트 측에서 노출 위험)
서버리스 함수 필요성 (백엔드 로직용)

1.2 해결 방안

JAMstack 아키텍처 채택
서버리스 함수로 백엔드 로직 구현
API 키 보안을 위한 프록시 서비스 활용

2. 아키텍처 설계
2.1 전체 아키텍처
GitHub Pages (정적 호스팅)
↓ ↑
Netlify/Vercel Functions (서버리스 백엔드)
↓ ↑
Claude API (텍스트 처리)
2.2 클라이언트-서버 분리

React SPA를 GitHub Pages에 호스팅
백엔드 로직을 Netlify/Vercel Functions로 구현
CORS 설정으로 두 서비스 간 통신 허용

3. 배포 파이프라인
3.1 GitHub Actions 워크플로우
yamlname: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages
          folder: build
3.2 환경 설정 관리

.env.development: 개발 환경 변수
.env.production: 배포 환경 변수
API 엔드포인트 동적 설정

4. 프론트엔드 최적화
4.1 성능 최적화

코드 분할 및 지연 로딩
정적 에셋 최적화 (이미지, CSS, JS)
캐시 전략 및 서비스 워커 활용

4.2 프로그레시브 웹 앱 (PWA)

오프라인 기능 지원
설치 가능한 앱 경험
푸시 알림 (향후 확장)

5. 서버리스 백엔드 구현
5.1 Netlify Functions 설정
netlify.toml:

[build]
  functions = "netlify/functions"

[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200
5.2 주요 서버리스 함수
javascript// netlify/functions/optimize.js

exports.handler = async function(event, context) {
  // API 키 보안 처리
  const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY;
  
  try {
    const requestBody = JSON.parse(event.body);
    const { text, purpose, options } = requestBody;
    
    // Claude API 호출 로직
    const optimizedText = await optimizeWithClaude(
      text, purpose, options, CLAUDE_API_KEY
    );
    
    return {
      statusCode: 200,
      body: JSON.stringify(optimizedText)
    };
  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify({ error: error.message })
    };
  }
};
6. 보안 고려사항
6.1 API 키 보호

환경 변수로 API 키 관리
서버리스 함수를 통한 간접 호출

6.2 사용자 데이터 처리

클라이언트 측 데이터 최소화
민감한 데이터는 서버리스 함수에서만 처리
세션 기반 사용량 제한 구현

6.3 CORS 및 CSP 설정

허용된 도메인에서만 API 호출 가능
콘텐츠 보안 정책으로 인젝션 방지

7. 모니터링 및 분석
7.1 성능 모니터링

Google Analytics 통합
페이지 로드 및 API 응답 시간 추적
사용자 행동 패턴 분석

7.2 에러 트래킹

Sentry 또는 LogRocket 통합
클라이언트 및 서버 오류 캡처
자동 알림 설정

8. 확장성 고려사항
8.1 트래픽 증가 대응

CDN 활용 (Cloudflare 등)
API 요청 캐싱 전략
서버리스 함수 확장 계획

8.2 기능 확장

A/B 테스트 프레임워크 구축
기능 플래그 시스템
점진적 배포 전략